# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import service_pb2 as service__pb2


class fileServiceStub(object):
  """文件节点服务器
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Upload = channel.unary_unary(
        '/fileService/Upload',
        request_serializer=service__pb2.DataRequest.SerializeToString,
        response_deserializer=service__pb2.SimpleReply.FromString,
        )
    self.Download = channel.unary_unary(
        '/fileService/Download',
        request_serializer=service__pb2.SimpleRequest.SerializeToString,
        response_deserializer=service__pb2.DataReply.FromString,
        )
    self.Update = channel.unary_unary(
        '/fileService/Update',
        request_serializer=service__pb2.DataRequest.SerializeToString,
        response_deserializer=service__pb2.SimpleReply.FromString,
        )


class fileServiceServicer(object):
  """文件节点服务器
  """

  def Upload(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Download(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Update(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_fileServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Upload': grpc.unary_unary_rpc_method_handler(
          servicer.Upload,
          request_deserializer=service__pb2.DataRequest.FromString,
          response_serializer=service__pb2.SimpleReply.SerializeToString,
      ),
      'Download': grpc.unary_unary_rpc_method_handler(
          servicer.Download,
          request_deserializer=service__pb2.SimpleRequest.FromString,
          response_serializer=service__pb2.DataReply.SerializeToString,
      ),
      'Update': grpc.unary_unary_rpc_method_handler(
          servicer.Update,
          request_deserializer=service__pb2.DataRequest.FromString,
          response_serializer=service__pb2.SimpleReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'fileService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class directoryServiceStub(object):
  """目录服务器
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetFileServer = channel.unary_unary(
        '/directoryService/GetFileServer',
        request_serializer=service__pb2.SimpleRequest.SerializeToString,
        response_deserializer=service__pb2.SimpleReply.FromString,
        )
    self.GetSlaves = channel.unary_unary(
        '/directoryService/GetSlaves',
        request_serializer=service__pb2.SimpleRequest.SerializeToString,
        response_deserializer=service__pb2.SimpleReply.FromString,
        )


class directoryServiceServicer(object):
  """目录服务器
  """

  def GetFileServer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSlaves(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_directoryServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetFileServer': grpc.unary_unary_rpc_method_handler(
          servicer.GetFileServer,
          request_deserializer=service__pb2.SimpleRequest.FromString,
          response_serializer=service__pb2.SimpleReply.SerializeToString,
      ),
      'GetSlaves': grpc.unary_unary_rpc_method_handler(
          servicer.GetSlaves,
          request_deserializer=service__pb2.SimpleRequest.FromString,
          response_serializer=service__pb2.SimpleReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'directoryService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class lockServiceStub(object):
  """锁服务器
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Lock = channel.unary_unary(
        '/lockService/Lock',
        request_serializer=service__pb2.SimpleRequest.SerializeToString,
        response_deserializer=service__pb2.SimpleReply.FromString,
        )
    self.Unlock = channel.unary_unary(
        '/lockService/Unlock',
        request_serializer=service__pb2.SimpleRequest.SerializeToString,
        response_deserializer=service__pb2.SimpleReply.FromString,
        )


class lockServiceServicer(object):
  """锁服务器
  """

  def Lock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_lockServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Lock': grpc.unary_unary_rpc_method_handler(
          servicer.Lock,
          request_deserializer=service__pb2.SimpleRequest.FromString,
          response_serializer=service__pb2.SimpleReply.SerializeToString,
      ),
      'Unlock': grpc.unary_unary_rpc_method_handler(
          servicer.Unlock,
          request_deserializer=service__pb2.SimpleRequest.FromString,
          response_serializer=service__pb2.SimpleReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'lockService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
